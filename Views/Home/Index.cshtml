
@{
    @model List<Items>
}
<style>
    #item-type {
        margin:5px auto;
        padding: 8px 20px;
        font-size: 16px;
        border-radius: 5px;
        border: 1px solid #ccc;
        background-color: black
        ;
        color: white;
     /* for Firefox */
    }

    #item-type:focus {
        outline: none;
        border-color: black;
        box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
    }
    #item-type:hover{
            background-color: grey; /* change the background color on hover */
            color: white;

    }

    .row {
        display: flex;
        align-items: center;
    }

    input, select {
        margin-right: 10px;
    }

    .row-total {
        margin-right: 10px;
        font-weight: bold;
    }

    .remove-row {
        margin-left: 10px;
    }

    table {
        font-family: Arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        text-align: left;
        padding: 8px;
        border: 1px solid #ddd;
    }

    th {
        background-color: black;
        color: white;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

        tr:hover {
        background-color: grey;
    }

    .myquantity {
        margin: 0 0 0 100px;
        width: 50%;
        /*box-sizing: border-box;*/
        padding: 8px;
        font-size: 14px;
        border-color: black;
        border-radius: 5px;
        background-color: #f1f1f1;
        text-align: center;
    }
    .myquantity:focus {
        outline: none;
        background-color: #fff;
    }

/*
    table {
        font-family: Arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        text-align: left;
        padding: 8px;
        border: 1px solid #ddd;
    }

    th {
        background-color: #4CAF50;
        color: white;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }*/

  /*  .myquantity {
        width: 100%;
        box-sizing: border-box;
        padding: 8px;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        background-color: #f1f1f1;
        text-align: center;
    }

        .myquantity:focus {
            outline: none;
            background-color: #fff;
        }*/
    button {
       float:right;
        background-color: black; /* set the background color */
        border: none; /* remove the border */
        color: white; /* set the font color */
        padding: 15px 32px; /* set the padding */
        text-align: center; /* center the text */
        text-decoration: none; /* remove any underline */
        display: inline-block; /* set the button display as inline-block */
        font-size: 16px; /* set the font size */
        margin: 4px 2px; /* add some margin */
        cursor: pointer; /* set the cursor style */
        border-radius: 10px; /* round the corners */
        transition-duration: 0.4s; /* add a smooth transition effect */
    }

    button:hover {
        background-color: grey; /* change the background color on hover */
        color: white; /* change the font color on hover */
    }
</style>

<select id="item-type">
    <option value="">select</option>
    <option value="Electrical">Electrical</option>
    <option value="Sanitary">Sanitary</option>
    <option value="Hardware">Hardware</option>
</select>

<table>
    <thead>
        <tr>
            <th>Sno</th>
            <th>Price $</th>
            <th>Item Name</th>
            
            <th>Quantity</th>
            <th>Total</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Model.Count; i++)
        {
            <tr>
                <td>@(i + 1)</td>
                <td>@Model[i].Price</td>
                <td class="getName">@Model[i].ItemsName</td>
                
                <td>
                    <input class="myquantity" type="number" name="quantity[]" placeholder="Quantity" data-price="@Model[i].Price" data-index="@i" />
                </td>
                <td>
                    <span class="mytotal" data-index="@i"></span>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3"></td>
            <td>Grand Total:</td>
            <td>
                <span id="totalAmount"></span>
            </td>
        </tr>
    </tfoot>
</table>
<button id="printbtn" class="button" >Add Bill</button>

@section scripts {
    <script src="https://code.jquery.com/jquery-3.6.4.min.js" integrity="sha256-oP6HI9z1XaZNBrJURtCoUT5SUnxFr8s3BzRl+cbzUq8=" crossorigin="anonymous"></script>

    <script>
     

        var quantityInputs = document.querySelectorAll('.myquantity');
        var getName = document.querySelectorAll(".getName");
        var totalSpans = document.querySelectorAll('.mytotal');
        var grandTotalSpan = document.querySelector('#totalAmount');
        var printBillBtn=document.querySelector('#printbtn')
        var prices = [];
        var quantities = [];
        var itemsToUpdate = [];

        //$(document).ready(function () {
        //    $("#printbtn").click(function () {
        //        var updateQuantityRequest = [];
        //        for (var i = 0; i < itemsToUpdate.length; i++) {

        //            updateQuantityRequest.push(itemsToUpdate[i]);
        //        }
        //        const name = prompt("Please enter your name:");
        //        const amount = parseInt(grandTotalSpan.textContent);
        //        //var data = {
        //        //     updateQuantityRequest
        //        //};
        //        debugger

        //        $.ajax({
        //            type: "PATCH",
        //            dataType: 'json',
        //            contentType: 'application/json',
        //            data: {
        //                "updateQuantityRequest": JSON.stringify(updateQuantityRequest)
        //            },
        //            url: "/Home/UpdateQuantity",
                    
        //            success: function (response) {
        //                alert("Message sent successfully.");
        //            },
        //            error: function (xhr, status, error) {
        //                alert("Error sending message: " + error);
        //            }
        //        });
        //    });
        //});

        printBillBtn.addEventListener('click', async () => {
            var updateQuantityRequest = [];
            for (var i = 0; i < itemsToUpdate.length; i++) {

                updateQuantityRequest.push(itemsToUpdate[i]);
            }
          
            const form = new FormData();

            form.append('updateQuantityRequest', JSON.stringify(updateQuantityRequest));
           
            const xhr = new XMLHttpRequest();
            xhr.open('PATCH', '/Home/UpdateQuantity');
           
           await xhr.addEventListener('load', () => {
                if (xhr.status === 200) {
                    //debugger

                    window.location.href = '/Home/Thanks';
                } else {
                  
                    console.error('Error: ' + xhr.statusText);
                }
            });

            await updateQuantity2();
            await xhr.send(form);

        });
        function updateQuantity2() {
            const name = prompt("Please enter your name:");
            const amount = parseInt(grandTotalSpan.textContent);
            const form = new FormData();
            form.append('customerName', name);
            form.append('totalAmount', amount);
            
            $.ajax({
                url: '/Home/Addbill',
                type: 'POST',
                data: form,
                processData: false,
                contentType: false,
                success: function (response) {
                    window.location.href = '/Home/Thanks';
                },
                error: function (xhr, status, error) {
                    console.error('Error: ' + error);
                }
            });
        }

        //async function updateQuantity2(){

        //    const name = prompt("Please enter your name:");
        //    const amount = parseInt(grandTotalSpan.textContent);
        //    const form = new FormData();
        //    //form.append('updateQuantityRequest', updateQuantityRequest);
        //    form.append('customerName', name);
        //    form.append('totalAmount', amount);
        //    debugger
        //    const xhr = new XMLHttpRequest();
        //    xhr.open('POST', '/Home/Addbill');
        //    await xhr.addEventListener('load', () => {
        //        if (xhr.status === 200) {
                  
        //            window.location.href = '/Home/Thansks';
        //        } else {
        //            console.error('Error: ' + xhr.statusText);
        //        }
        //    });
        //    xhr.send(form);
            
          
        //}
        // initialize prices and quantities arrays
        for (var i = 0; i < quantityInputs.length; i++) {
            var price = parseFloat(quantityInputs[i].getAttribute('data-price'));
            var quantity = 0;
            prices.push(price);
            quantities.push(quantity);
        }
        document.getElementById("item-type").addEventListener("change", function () {
            var selectedType = this.value;
            window.location.href = "/Home/Index?selectedType=" + selectedType;
        });
        // calculate and update row total and grand total 
        async function calculateTotals() {
            var grandTotal = 0;
            for (var i = 0; i < quantityInputs.length; i++) {
                var quantity = parseInt(quantityInputs[i].value);
                var total = quantity * prices[i];
                quantities[i] = quantity;
                totalSpans[i].innerHTML = total.toFixed(2);
                grandTotal += total;
                //        debugger
                // add item to the itemsToUpdate array
                var itemName = document.querySelectorAll('.myquantity')[i].parentElement.previousElementSibling.innerHTML;
                var item = {
                    "itemsName": itemName,
                    "itemsQuantity": quantity
                };
                itemsToUpdate[i] = item;
            }

            grandTotalSpan.innerHTML = grandTotal.toFixed(2);
        }
       
        // attach event listener to quantity input
        for (var i = 0; i < quantityInputs.length; i++) {
            quantityInputs[i].addEventListener('change', calculateTotals);
        }
    </script>
}